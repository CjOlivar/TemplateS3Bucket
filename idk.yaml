AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation Template with an S3 Bucket, CloudFront Distribution, CodePipeline, IAM Roles, Lambda Function, CloudFront Invalidation, and SSM Automation for AMI creation

Parameters:
  Certarn:
    Type: String
    Default: arn:aws:acm:us-east-1:680622018867:certificate/1457c295-03e0-4d44-ba6e-b3920fb8d50d
    Description: Certificate arn in us-east-1
  Aliases:
    Type: String
    Default: cjolivar.serveraccess.link
    Description: This is an alias
  HostedzoneID:
    Type: String
    Default: Z0206762ADO5JH04R7F7
    Description: This is a HostedZoneId of serveraccess.link domain
  SourceObjectKey:
    Type: String
    Default: index.html
    Description: Key of the object in the S3 bucket containing the source code
  FullRepositoryId:
    Type: String
    Description: Full repository ID (e.g., user/repository-name)
  ConnectionArnId:
    Type: String
    Default: arn:aws:codestar-connections:ap-southeast-1:680622018867:connection/ce63c829-a2dc-43f8-a67b-0f8d1e1491e1
    Description: This is the ConnectionArn
  BranchName:
    Type: String
    Default: main
    Description: This is the BranchName
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

Resources:
  MyS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub 'my-s3-bucket-example-${AWS::Region}-${AWS::AccountId}'
      AccessControl: Private
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      NotificationConfiguration:
        EventBridgeConfiguration: 
          EventBridgeEnabled: true
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: AppManagerCFNStackKey
          Value: "WebsiteRedesign"

  ArtifactBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub 'codepipeline-artifacts-${AWS::Region}-${AWS::AccountId}'
      Tags:
        - Key: AppManagerCFNStackKey
          Value: "WebsiteRedesign"
  
  S3BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref MyS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:user/${S3User}'
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
              - 's3:DeleteObject'
            Resource: !Sub 'arn:aws:s3:::${MyS3Bucket}/*'
          - Effect: Allow
            Principal:
              CanonicalUser: !GetAtt MyCloudFrontOriginAccessIdentity.S3CanonicalUserId
            Action:
              - 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::${MyS3Bucket}/*'

  S3User:
    Type: 'AWS::IAM::User'
    Properties:
      UserName: "S3-TestUser"
      Tags:
        - Key: AppManagerCFNStackKey
          Value: "WebsiteRedesign"

  S3UserPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Users:
        - !Ref S3User
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:DeleteObject
            Resource: !Sub 'arn:aws:s3:::${MyS3Bucket}/*'

  MyCloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Aliases: 
          - !Ref Aliases  
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt MyS3Bucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${MyCloudFrontOriginAccessIdentity}'
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          Compress: true
          DefaultTTL: 86400
          MaxTTL: 31536000
          MinTTL: 0
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        ViewerCertificate:
          AcmCertificateArn: !Ref Certarn 
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
      Tags:
        - Key: AppManagerCFNStackKey
          Value: "WebsiteRedesign"

  MyCloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Access Identity for S3 Bucket

  MyRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedzoneID
      Name: !Ref Aliases
      Type: CNAME
      TTL: '300'
      ResourceRecords:
        - !GetAtt MyCloudFrontDistribution.DomainName

  MyInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref SSMInstanceProfile
      ImageId: ami-06d753822bd94c64e
      Tags:
        - Key: Name
          Value: MySSMInstance
        - Key: AppManagerCFNStackKey
          Value: "WebsiteRedesign"


  SSMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
        - Key: AppManagerCFNStackKey
          Value: "WebsiteRedesign"

  SSMInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: '/'
      Roles:
        - !Ref SSMRole

  CodePipelineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub 'arn:aws:s3:::${ArtifactBucket}/*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub 'arn:aws:s3:::${MyS3Bucket}/*'
              - Effect: Allow
                Action:
                  - cloudfront:CreateInvalidation
                Resource: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${MyCloudFrontDistribution}'
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: '*'

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: LambdaCloudFrontInvalidationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudfront:CreateInvalidation
                Resource: '*'

  InvalidationFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'InvalidationFunction'
      Handler: 'index.lambda_handler'
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
              import json
              import boto3

              code_pipeline = boto3.client("codepipeline")
              cloud_front = boto3.client("cloudfront")

              def lambda_handler(event, context):
                  job_id = event["CodePipeline.job"]["id"]
                  try:
                      user_params = json.loads(
                          event["CodePipeline.job"]
                              ["data"]
                              ["actionConfiguration"]
                              ["configuration"]
                              ["UserParameters"]
                      )
                      cloud_front.create_invalidation(
                          DistributionId=user_params["DistributionId"],
                          InvalidationBatch={
                              "Paths": {
                                  "Quantity": len(user_params["objectPaths"]),
                                  "Items": user_params["objectPaths"],
                              },
                              "CallerReference": event["CodePipeline.job"]["id"],
                          },
                      )
                  except Exception as e:
                      code_pipeline.put_job_failure_result(
                          jobId=job_id,
                          failureDetails={
                              "type": "JobFailed",
                              "message": str(e),
                          },
                      )
                  else:
                      code_pipeline.put_job_success_result(
                          jobId=job_id,
                      )
      Runtime: python3.8
      Description: Lambda function to invalidate cache files in CloudFront distributions
      MemorySize: 128
      Timeout: 600

  MyPipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: 1
              Configuration:
                ConnectionArn: !Ref ConnectionArnId
                FullRepositoryId: !Ref FullRepositoryId
                BranchName: !Ref BranchName
                OutputArtifactFormat: CODE_ZIP
              OutputArtifacts:
                - Name: SourceArtifact
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: 1
              Configuration:
                BucketName: !Ref MyS3Bucket
                Extract: true
              InputArtifacts:
                - Name: SourceArtifact
        - Name: InvalidateCache
          Actions:
            - Name: InvalidateCache
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: 1
              Configuration:
                FunctionName: !Ref InvalidationFunction
              RunOrder: 2
              InputArtifacts:
                - Name: SourceArtifact

  AutomationServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ssm.amazonaws.com
          Action: sts:AssumeRole
          Condition:
            StringEquals:
              aws:SourceAccount: !Sub ${AWS::AccountId}
            ArnLike:
              aws:SourceArn: !Sub arn:aws:ssm:*:${AWS::AccountId}:automation-execution/*
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonSSMAutomationRole
      Path: "/"
      RoleName: AutomationServiceRole

Outputs:
  S3BucketName:
    Description: Name of the S3 bucket
    Value: !Ref MyS3Bucket
  CloudFrontDistributionID:
    Description: CloudFront Distribution ID
    Value: !Ref MyCloudFrontDistribution
  S3BucketArn:
    Description: 'ARN of the S3 bucket'
    Value: !GetAtt MyS3Bucket.Arn
  WebsiteURL:
    Value: !Sub 'http://${MyCloudFrontDistribution.DomainName}'
    Description: URL for the static website
  PipelineName:
    Description: 'Name of the CodePipeline' 
    Value: !Ref MyPipeline
  LambdaExecutionRoleName:
    Description: 'Name of LambdaExecutionRole'
    Value: !Ref LambdaExecutionRole
  InstanceProfile:
    Description: Instance profile to be used on EC2 instances for SSM
    Value: !Ref SSMInstanceProfile
  InstanceId:
    Description: The Instance ID
    Value: !Ref MyInstance